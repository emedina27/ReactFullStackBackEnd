{
  "{\"sourceRoot\":\"/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend\",\"filename\":\"/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend/src/server.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend\",\"plugins\":[{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.7.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend",
      "filename": "/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend/src/server.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend/src/server.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend/src/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend/src",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _bodyParser = _interopRequireDefault(require(\"body-parser\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar articlesInfo = {\n  \"learn-react\": {\n    upvotes: 0,\n    comments: []\n  },\n  \"learn-node\": {\n    upvotes: 0,\n    comments: []\n  },\n  \"my-thoughts-on-resumes\": {\n    upvotes: 0,\n    comments: []\n  }\n}; // Request Types: Get,Post(+requestbody),Patch,Delete\n// run: npx babel-node src/server.js\n// Added body parser dependencies\n\nvar app = (0, _express[\"default\"])(); //Parses json object that is included with post request.\n\napp.use(_bodyParser[\"default\"].json()); //define a new end point to send request to update upvotes via post request\n\napp.post(\"/api/articles/:name/upvote\", function (req, res) {\n  //get name form params\n  var articleName = req.params.name; //target upvotes\n\n  articlesInfo[articleName].upvotes += 1; //sending message\n\n  res.status(200).send(\"\".concat(articleName, \" now has \").concat(articlesInfo[articleName].upvotes, \" upvotes.\"));\n});\n/*\n-------- COMMENT FUNCTION -----------------------------\ncurly braces is the body of our call back (req,res).\ntest in postman to detemrien what the body will look like.\n-Send request to add comment end-point.\n- In PostMan apply url + path in Post.\n- selected options in PostMan: Post, Body, Raw, JSON\n- Fill Body content json format\n- access data via via app.post...\n- Data needed is in req.body\n- \"   \"   \"   \" \"username\" and \"text\" \n- get articleName form url params\n- Next Just add the new comment in the req.body to      comments [] in the selected article.\n*/\n\napp.post(\"/api/articles/:name/add-comment\", function (req, res) {\n  var _req$body = req.body,\n      username = _req$body.username,\n      text = _req$body.text; // get articleName form url params\n\n  var articleName = req.params.name;\n  /*\n  accesses array ->Name->comments then adds the username and text via .push\n  saving the previous push\n  */\n\n  articlesInfo[articleName].comments.push({\n    username: username,\n    text: text\n  }); // respsonse (200)\n\n  res.status(200).send(articlesInfo[articleName]); // res.status(200).send(articlesInfo[articleName]);\n});\n/* --- Misc Gets and Post ------*/\n// app.get(\"/hello\", (req, res) => res.send(\"Hello \"));\n\n/* server side: server takes value out pf specified section of url and put it into       response using url params */\n// app.get(\"/hello/:name\", (req, res) => res.send(`Hello ${req.params.name}`));\n//client side\n// app.post(\"/hello\", (req, res) => res.send(`Hello ${req.body.name}!`));\n//listen on port...\n\napp.listen(8000, function () {\n  return console.log(\"Listening on port 8000\");\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJhcnRpY2xlc0luZm8iLCJ1cHZvdGVzIiwiY29tbWVudHMiLCJhcHAiLCJ1c2UiLCJib2R5UGFyc2VyIiwianNvbiIsInBvc3QiLCJyZXEiLCJyZXMiLCJhcnRpY2xlTmFtZSIsInBhcmFtcyIsIm5hbWUiLCJzdGF0dXMiLCJzZW5kIiwiYm9keSIsInVzZXJuYW1lIiwidGV4dCIsInB1c2giLCJsaXN0ZW4iLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOzs7O0FBRUEsSUFBTUEsWUFBWSxHQUFHO0FBQ25CLGlCQUFlO0FBQ2JDLElBQUFBLE9BQU8sRUFBRSxDQURJO0FBRWJDLElBQUFBLFFBQVEsRUFBRTtBQUZHLEdBREk7QUFLbkIsZ0JBQWM7QUFDWkQsSUFBQUEsT0FBTyxFQUFFLENBREc7QUFFWkMsSUFBQUEsUUFBUSxFQUFFO0FBRkUsR0FMSztBQVNuQiw0QkFBMEI7QUFDeEJELElBQUFBLE9BQU8sRUFBRSxDQURlO0FBRXhCQyxJQUFBQSxRQUFRLEVBQUU7QUFGYztBQVRQLENBQXJCLEMsQ0FlQTtBQUNBO0FBQ0E7O0FBRUEsSUFBTUMsR0FBRyxHQUFHLDBCQUFaLEMsQ0FFQTs7QUFDQUEsR0FBRyxDQUFDQyxHQUFKLENBQVFDLHVCQUFXQyxJQUFYLEVBQVIsRSxDQUVBOztBQUVBSCxHQUFHLENBQUNJLElBQUosQ0FBUyw0QkFBVCxFQUF1QyxVQUFDQyxHQUFELEVBQU1DLEdBQU4sRUFBYztBQUNuRDtBQUNBLE1BQU1DLFdBQVcsR0FBR0YsR0FBRyxDQUFDRyxNQUFKLENBQVdDLElBQS9CLENBRm1ELENBSW5EOztBQUNBWixFQUFBQSxZQUFZLENBQUNVLFdBQUQsQ0FBWixDQUEwQlQsT0FBMUIsSUFBcUMsQ0FBckMsQ0FMbUQsQ0FPbkQ7O0FBQ0FRLEVBQUFBLEdBQUcsQ0FDQUksTUFESCxDQUNVLEdBRFYsRUFFR0MsSUFGSCxXQUdPSixXQUhQLHNCQUc4QlYsWUFBWSxDQUFDVSxXQUFELENBQVosQ0FBMEJULE9BSHhEO0FBS0QsQ0FiRDtBQWVBOzs7Ozs7Ozs7Ozs7Ozs7QUFjQUUsR0FBRyxDQUFDSSxJQUFKLENBQVMsaUNBQVQsRUFBNEMsVUFBQ0MsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFBQSxrQkFDN0JELEdBQUcsQ0FBQ08sSUFEeUI7QUFBQSxNQUNoREMsUUFEZ0QsYUFDaERBLFFBRGdEO0FBQUEsTUFDdENDLElBRHNDLGFBQ3RDQSxJQURzQyxFQUd4RDs7QUFDQSxNQUFNUCxXQUFXLEdBQUdGLEdBQUcsQ0FBQ0csTUFBSixDQUFXQyxJQUEvQjtBQUVBOzs7OztBQUlBWixFQUFBQSxZQUFZLENBQUNVLFdBQUQsQ0FBWixDQUEwQlIsUUFBMUIsQ0FBbUNnQixJQUFuQyxDQUF3QztBQUFFRixJQUFBQSxRQUFRLEVBQVJBLFFBQUY7QUFBWUMsSUFBQUEsSUFBSSxFQUFKQTtBQUFaLEdBQXhDLEVBVndELENBWXhEOztBQUNBUixFQUFBQSxHQUFHLENBQUNJLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQmQsWUFBWSxDQUFDVSxXQUFELENBQWpDLEVBYndELENBZXhEO0FBQ0QsQ0FoQkQ7QUFrQkE7QUFDQTs7QUFFQTtBQUVBO0FBRUE7QUFDQTtBQUVBOztBQUNBUCxHQUFHLENBQUNnQixNQUFKLENBQVcsSUFBWCxFQUFpQjtBQUFBLFNBQU1DLE9BQU8sQ0FBQ0MsR0FBUixDQUFZLHdCQUFaLENBQU47QUFBQSxDQUFqQiIsInNvdXJjZVJvb3QiOiIvVXNlcnMvZW0vRGVza3RvcC9XeW5jb2RlL1JlYWN0RnVsbFN0YWNrL015LUFwcC1CYWNrZW5kL3NyYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBleHByZXNzIGZyb20gXCJleHByZXNzXCI7XG5pbXBvcnQgYm9keVBhcnNlciBmcm9tIFwiYm9keS1wYXJzZXJcIjtcblxuY29uc3QgYXJ0aWNsZXNJbmZvID0ge1xuICBcImxlYXJuLXJlYWN0XCI6IHtcbiAgICB1cHZvdGVzOiAwLFxuICAgIGNvbW1lbnRzOiBbXVxuICB9LFxuICBcImxlYXJuLW5vZGVcIjoge1xuICAgIHVwdm90ZXM6IDAsXG4gICAgY29tbWVudHM6IFtdXG4gIH0sXG4gIFwibXktdGhvdWdodHMtb24tcmVzdW1lc1wiOiB7XG4gICAgdXB2b3RlczogMCxcbiAgICBjb21tZW50czogW11cbiAgfVxufTtcblxuLy8gUmVxdWVzdCBUeXBlczogR2V0LFBvc3QoK3JlcXVlc3Rib2R5KSxQYXRjaCxEZWxldGVcbi8vIHJ1bjogbnB4IGJhYmVsLW5vZGUgc3JjL3NlcnZlci5qc1xuLy8gQWRkZWQgYm9keSBwYXJzZXIgZGVwZW5kZW5jaWVzXG5cbmNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcblxuLy9QYXJzZXMganNvbiBvYmplY3QgdGhhdCBpcyBpbmNsdWRlZCB3aXRoIHBvc3QgcmVxdWVzdC5cbmFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuXG4vL2RlZmluZSBhIG5ldyBlbmQgcG9pbnQgdG8gc2VuZCByZXF1ZXN0IHRvIHVwZGF0ZSB1cHZvdGVzIHZpYSBwb3N0IHJlcXVlc3RcblxuYXBwLnBvc3QoXCIvYXBpL2FydGljbGVzLzpuYW1lL3Vwdm90ZVwiLCAocmVxLCByZXMpID0+IHtcbiAgLy9nZXQgbmFtZSBmb3JtIHBhcmFtc1xuICBjb25zdCBhcnRpY2xlTmFtZSA9IHJlcS5wYXJhbXMubmFtZTtcblxuICAvL3RhcmdldCB1cHZvdGVzXG4gIGFydGljbGVzSW5mb1thcnRpY2xlTmFtZV0udXB2b3RlcyArPSAxO1xuXG4gIC8vc2VuZGluZyBtZXNzYWdlXG4gIHJlc1xuICAgIC5zdGF0dXMoMjAwKVxuICAgIC5zZW5kKFxuICAgICAgYCR7YXJ0aWNsZU5hbWV9IG5vdyBoYXMgJHthcnRpY2xlc0luZm9bYXJ0aWNsZU5hbWVdLnVwdm90ZXN9IHVwdm90ZXMuYFxuICAgICk7XG59KTtcblxuLypcbi0tLS0tLS0tIENPTU1FTlQgRlVOQ1RJT04gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmN1cmx5IGJyYWNlcyBpcyB0aGUgYm9keSBvZiBvdXIgY2FsbCBiYWNrIChyZXEscmVzKS5cbnRlc3QgaW4gcG9zdG1hbiB0byBkZXRlbXJpZW4gd2hhdCB0aGUgYm9keSB3aWxsIGxvb2sgbGlrZS5cbi1TZW5kIHJlcXVlc3QgdG8gYWRkIGNvbW1lbnQgZW5kLXBvaW50LlxuLSBJbiBQb3N0TWFuIGFwcGx5IHVybCArIHBhdGggaW4gUG9zdC5cbi0gc2VsZWN0ZWQgb3B0aW9ucyBpbiBQb3N0TWFuOiBQb3N0LCBCb2R5LCBSYXcsIEpTT05cbi0gRmlsbCBCb2R5IGNvbnRlbnQganNvbiBmb3JtYXRcbi0gYWNjZXNzIGRhdGEgdmlhIHZpYSBhcHAucG9zdC4uLlxuLSBEYXRhIG5lZWRlZCBpcyBpbiByZXEuYm9keVxuLSBcIiAgIFwiICAgXCIgICBcIiBcInVzZXJuYW1lXCIgYW5kIFwidGV4dFwiIFxuLSBnZXQgYXJ0aWNsZU5hbWUgZm9ybSB1cmwgcGFyYW1zXG4tIE5leHQgSnVzdCBhZGQgdGhlIG5ldyBjb21tZW50IGluIHRoZSByZXEuYm9keSB0byAgICAgIGNvbW1lbnRzIFtdIGluIHRoZSBzZWxlY3RlZCBhcnRpY2xlLlxuKi9cbmFwcC5wb3N0KFwiL2FwaS9hcnRpY2xlcy86bmFtZS9hZGQtY29tbWVudFwiLCAocmVxLCByZXMpID0+IHtcbiAgY29uc3QgeyB1c2VybmFtZSwgdGV4dCB9ID0gcmVxLmJvZHk7XG5cbiAgLy8gZ2V0IGFydGljbGVOYW1lIGZvcm0gdXJsIHBhcmFtc1xuICBjb25zdCBhcnRpY2xlTmFtZSA9IHJlcS5wYXJhbXMubmFtZTtcblxuICAvKlxuICBhY2Nlc3NlcyBhcnJheSAtPk5hbWUtPmNvbW1lbnRzIHRoZW4gYWRkcyB0aGUgdXNlcm5hbWUgYW5kIHRleHQgdmlhIC5wdXNoXG4gIHNhdmluZyB0aGUgcHJldmlvdXMgcHVzaFxuICAqL1xuICBhcnRpY2xlc0luZm9bYXJ0aWNsZU5hbWVdLmNvbW1lbnRzLnB1c2goeyB1c2VybmFtZSwgdGV4dCB9KTtcblxuICAvLyByZXNwc29uc2UgKDIwMClcbiAgcmVzLnN0YXR1cygyMDApLnNlbmQoYXJ0aWNsZXNJbmZvW2FydGljbGVOYW1lXSk7XG5cbiAgLy8gcmVzLnN0YXR1cygyMDApLnNlbmQoYXJ0aWNsZXNJbmZvW2FydGljbGVOYW1lXSk7XG59KTtcblxuLyogLS0tIE1pc2MgR2V0cyBhbmQgUG9zdCAtLS0tLS0qL1xuLy8gYXBwLmdldChcIi9oZWxsb1wiLCAocmVxLCByZXMpID0+IHJlcy5zZW5kKFwiSGVsbG8gXCIpKTtcblxuLyogc2VydmVyIHNpZGU6IHNlcnZlciB0YWtlcyB2YWx1ZSBvdXQgcGYgc3BlY2lmaWVkIHNlY3Rpb24gb2YgdXJsIGFuZCBwdXQgaXQgaW50byAgICAgICByZXNwb25zZSB1c2luZyB1cmwgcGFyYW1zICovXG5cbi8vIGFwcC5nZXQoXCIvaGVsbG8vOm5hbWVcIiwgKHJlcSwgcmVzKSA9PiByZXMuc2VuZChgSGVsbG8gJHtyZXEucGFyYW1zLm5hbWV9YCkpO1xuXG4vL2NsaWVudCBzaWRlXG4vLyBhcHAucG9zdChcIi9oZWxsb1wiLCAocmVxLCByZXMpID0+IHJlcy5zZW5kKGBIZWxsbyAke3JlcS5ib2R5Lm5hbWV9IWApKTtcblxuLy9saXN0ZW4gb24gcG9ydC4uLlxuYXBwLmxpc3Rlbig4MDAwLCAoKSA9PiBjb25zb2xlLmxvZyhcIkxpc3RlbmluZyBvbiBwb3J0IDgwMDBcIikpO1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "articlesInfo",
        "upvotes",
        "comments",
        "app",
        "use",
        "bodyParser",
        "json",
        "post",
        "req",
        "res",
        "articleName",
        "params",
        "name",
        "status",
        "send",
        "body",
        "username",
        "text",
        "push",
        "listen",
        "console",
        "log"
      ],
      "mappings": ";;AAAA;;AACA;;;;AAEA,IAAMA,YAAY,GAAG;AACnB,iBAAe;AACbC,IAAAA,OAAO,EAAE,CADI;AAEbC,IAAAA,QAAQ,EAAE;AAFG,GADI;AAKnB,gBAAc;AACZD,IAAAA,OAAO,EAAE,CADG;AAEZC,IAAAA,QAAQ,EAAE;AAFE,GALK;AASnB,4BAA0B;AACxBD,IAAAA,OAAO,EAAE,CADe;AAExBC,IAAAA,QAAQ,EAAE;AAFc;AATP,CAArB,C,CAeA;AACA;AACA;;AAEA,IAAMC,GAAG,GAAG,0BAAZ,C,CAEA;;AACAA,GAAG,CAACC,GAAJ,CAAQC,uBAAWC,IAAX,EAAR,E,CAEA;;AAEAH,GAAG,CAACI,IAAJ,CAAS,4BAAT,EAAuC,UAACC,GAAD,EAAMC,GAAN,EAAc;AACnD;AACA,MAAMC,WAAW,GAAGF,GAAG,CAACG,MAAJ,CAAWC,IAA/B,CAFmD,CAInD;;AACAZ,EAAAA,YAAY,CAACU,WAAD,CAAZ,CAA0BT,OAA1B,IAAqC,CAArC,CALmD,CAOnD;;AACAQ,EAAAA,GAAG,CACAI,MADH,CACU,GADV,EAEGC,IAFH,WAGOJ,WAHP,sBAG8BV,YAAY,CAACU,WAAD,CAAZ,CAA0BT,OAHxD;AAKD,CAbD;AAeA;;;;;;;;;;;;;;;AAcAE,GAAG,CAACI,IAAJ,CAAS,iCAAT,EAA4C,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,kBAC7BD,GAAG,CAACO,IADyB;AAAA,MAChDC,QADgD,aAChDA,QADgD;AAAA,MACtCC,IADsC,aACtCA,IADsC,EAGxD;;AACA,MAAMP,WAAW,GAAGF,GAAG,CAACG,MAAJ,CAAWC,IAA/B;AAEA;;;;;AAIAZ,EAAAA,YAAY,CAACU,WAAD,CAAZ,CAA0BR,QAA1B,CAAmCgB,IAAnC,CAAwC;AAAEF,IAAAA,QAAQ,EAARA,QAAF;AAAYC,IAAAA,IAAI,EAAJA;AAAZ,GAAxC,EAVwD,CAYxD;;AACAR,EAAAA,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBd,YAAY,CAACU,WAAD,CAAjC,EAbwD,CAexD;AACD,CAhBD;AAkBA;AACA;;AAEA;AAEA;AAEA;AACA;AAEA;;AACAP,GAAG,CAACgB,MAAJ,CAAW,IAAX,EAAiB;AAAA,SAAMC,OAAO,CAACC,GAAR,CAAY,wBAAZ,CAAN;AAAA,CAAjB",
      "sourceRoot": "/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend/src",
      "sourcesContent": [
        "import express from \"express\";\nimport bodyParser from \"body-parser\";\n\nconst articlesInfo = {\n  \"learn-react\": {\n    upvotes: 0,\n    comments: []\n  },\n  \"learn-node\": {\n    upvotes: 0,\n    comments: []\n  },\n  \"my-thoughts-on-resumes\": {\n    upvotes: 0,\n    comments: []\n  }\n};\n\n// Request Types: Get,Post(+requestbody),Patch,Delete\n// run: npx babel-node src/server.js\n// Added body parser dependencies\n\nconst app = express();\n\n//Parses json object that is included with post request.\napp.use(bodyParser.json());\n\n//define a new end point to send request to update upvotes via post request\n\napp.post(\"/api/articles/:name/upvote\", (req, res) => {\n  //get name form params\n  const articleName = req.params.name;\n\n  //target upvotes\n  articlesInfo[articleName].upvotes += 1;\n\n  //sending message\n  res\n    .status(200)\n    .send(\n      `${articleName} now has ${articlesInfo[articleName].upvotes} upvotes.`\n    );\n});\n\n/*\n-------- COMMENT FUNCTION -----------------------------\ncurly braces is the body of our call back (req,res).\ntest in postman to detemrien what the body will look like.\n-Send request to add comment end-point.\n- In PostMan apply url + path in Post.\n- selected options in PostMan: Post, Body, Raw, JSON\n- Fill Body content json format\n- access data via via app.post...\n- Data needed is in req.body\n- \"   \"   \"   \" \"username\" and \"text\" \n- get articleName form url params\n- Next Just add the new comment in the req.body to      comments [] in the selected article.\n*/\napp.post(\"/api/articles/:name/add-comment\", (req, res) => {\n  const { username, text } = req.body;\n\n  // get articleName form url params\n  const articleName = req.params.name;\n\n  /*\n  accesses array ->Name->comments then adds the username and text via .push\n  saving the previous push\n  */\n  articlesInfo[articleName].comments.push({ username, text });\n\n  // respsonse (200)\n  res.status(200).send(articlesInfo[articleName]);\n\n  // res.status(200).send(articlesInfo[articleName]);\n});\n\n/* --- Misc Gets and Post ------*/\n// app.get(\"/hello\", (req, res) => res.send(\"Hello \"));\n\n/* server side: server takes value out pf specified section of url and put it into       response using url params */\n\n// app.get(\"/hello/:name\", (req, res) => res.send(`Hello ${req.params.name}`));\n\n//client side\n// app.post(\"/hello\", (req, res) => res.send(`Hello ${req.body.name}!`));\n\n//listen on port...\napp.listen(8000, () => console.log(\"Listening on port 8000\"));\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1573590230143
  }
}