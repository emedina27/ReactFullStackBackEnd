{
  "{\"sourceRoot\":\"/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend\",\"filename\":\"/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend/src/server.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend\",\"plugins\":[{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.7.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend",
      "filename": "/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend/src/server.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend/src/server.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend/src/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend/src",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _bodyParser = _interopRequireDefault(require(\"body-parser\"));\n\nvar _mongodb = require(\"mongodb\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n// Request Types: Get,Post(+requestbody),Patch,Delete\n// run: npx babel-node src/server.js\n// Added body parser dependencies\nvar app = (0, _express[\"default\"])(); //Parses json object that is included with post request.\n\napp.use(_bodyParser[\"default\"].json()); //connects monogodb to express\n\napp.get(\"api/articles/:name\", function _callee(req, res) {\n  var articleName, client, db, articleInfo;\n  return regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          articleName = req.params.name; // Connect function is Asyncronuse-Returns a promise-Can use Async Await\n          //mongo client connect returns a client obj, can be used to query db.\n\n          _context.next = 4;\n          return regeneratorRuntime.awrap(_mongodb.MongoClient.connect(\"mongodb://localhost:27017\", {\n            useNewUrlParser: true\n          }));\n\n        case 4:\n          client = _context.sent;\n          //to query our db\n          db = client.db(\"my-app\"); //then query like this\n\n          _context.next = 8;\n          return regeneratorRuntime.awrap(db.collection(\"articles\").findOne({\n            name: articleName\n          }));\n\n        case 8:\n          articleInfo = _context.sent;\n          res.status(200).json(articleInfo); //closes connection to db\n\n          client.close();\n          _context.next = 16;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](0);\n          res.status(500).json({\n            message: \"Error Connection to DB\",\n            error: _context.t0\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 13]]);\n}); //define a new end point to send request to update upvotes via post request\n\napp.post(\"/api/articles/:name/upvote\", function (req, res) {\n  //get name form params\n  var articleName = req.params.name; //target upvotes\n\n  articlesInfo[articleName].upvotes += 1; //sending message\n\n  res.status(200).send(\"\".concat(articleName, \" now has \").concat(articlesInfo[articleName].upvotes, \" upvotes.\"));\n});\n/*\n-------- COMMENT FUNCTION -----------------------------\ncurly braces is the body of our call back (req,res).\ntest in postman to detemrien what the body will look like.\n-Send request to add comment end-point.\n- In PostMan apply url + path in Post.\n- selected options in PostMan: Post, Body, Raw, JSON\n- Fill Body content json format\n- access data via via app.post...\n- Data needed is in req.body\n- \"   \"   \"   \" \"username\" and \"text\" \n- get articleName form url params\n- Next Just add the new comment in the req.body to      comments [] in the selected article.\n*/\n\napp.post(\"/api/articles/:name/add-comment\", function (req, res) {\n  var _req$body = req.body,\n      username = _req$body.username,\n      text = _req$body.text; // get articleName form url params\n\n  var articleName = req.params.name;\n  /*\n  accesses array ->Name->comments then adds the username and text via .push\n  saving the previous push\n  */\n\n  articlesInfo[articleName].comments.push({\n    username: username,\n    text: text\n  }); // respsonse (200)\n\n  res.status(200).send(articlesInfo[articleName]); // res.status(200).send(articlesInfo[articleName]);\n});\n/* --- Misc Gets and Post ------*/\n// app.get(\"/hello\", (req, res) => res.send(\"Hello \"));\n\n/* server side: server takes value out pf specified section of url and put it into       response using url params */\n// app.get(\"/hello/:name\", (req, res) => res.send(`Hello ${req.params.name}`));\n//client side\n// app.post(\"/hello\", (req, res) => res.send(`Hello ${req.body.name}!`));\n//listen on port...\n\napp.listen(8000, function () {\n  return console.log(\"Listening on port 8000\");\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJhcHAiLCJ1c2UiLCJib2R5UGFyc2VyIiwianNvbiIsImdldCIsInJlcSIsInJlcyIsImFydGljbGVOYW1lIiwicGFyYW1zIiwibmFtZSIsIk1vbmdvQ2xpZW50IiwiY29ubmVjdCIsInVzZU5ld1VybFBhcnNlciIsImNsaWVudCIsImRiIiwiY29sbGVjdGlvbiIsImZpbmRPbmUiLCJhcnRpY2xlSW5mbyIsInN0YXR1cyIsImNsb3NlIiwibWVzc2FnZSIsImVycm9yIiwicG9zdCIsImFydGljbGVzSW5mbyIsInVwdm90ZXMiLCJzZW5kIiwiYm9keSIsInVzZXJuYW1lIiwidGV4dCIsImNvbW1lbnRzIiwicHVzaCIsImxpc3RlbiIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFFQSxJQUFNQSxHQUFHLEdBQUcsMEJBQVosQyxDQUVBOztBQUNBQSxHQUFHLENBQUNDLEdBQUosQ0FBUUMsdUJBQVdDLElBQVgsRUFBUixFLENBRUE7O0FBRUFILEdBQUcsQ0FBQ0ksR0FBSixDQUFRLG9CQUFSLEVBQThCLGlCQUFPQyxHQUFQLEVBQVlDLEdBQVo7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFcEJDLFVBQUFBLFdBRm9CLEdBRU5GLEdBQUcsQ0FBQ0csTUFBSixDQUFXQyxJQUZMLEVBSTFCO0FBQ0E7O0FBTDBCO0FBQUEsMENBT0xDLHFCQUFZQyxPQUFaLENBQW9CLDJCQUFwQixFQUFpRDtBQUNwRUMsWUFBQUEsZUFBZSxFQUFFO0FBRG1ELFdBQWpELENBUEs7O0FBQUE7QUFPcEJDLFVBQUFBLE1BUG9CO0FBVzFCO0FBQ01DLFVBQUFBLEVBWm9CLEdBWWZELE1BQU0sQ0FBQ0MsRUFBUCxDQUFVLFFBQVYsQ0FaZSxFQWMxQjs7QUFkMEI7QUFBQSwwQ0FlQUEsRUFBRSxDQUN6QkMsVUFEdUIsQ0FDWixVQURZLEVBRXZCQyxPQUZ1QixDQUVmO0FBQUVQLFlBQUFBLElBQUksRUFBRUY7QUFBUixXQUZlLENBZkE7O0FBQUE7QUFlcEJVLFVBQUFBLFdBZm9CO0FBbUIxQlgsVUFBQUEsR0FBRyxDQUFDWSxNQUFKLENBQVcsR0FBWCxFQUFnQmYsSUFBaEIsQ0FBcUJjLFdBQXJCLEVBbkIwQixDQXFCMUI7O0FBQ0FKLFVBQUFBLE1BQU0sQ0FBQ00sS0FBUDtBQXRCMEI7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUF3QjFCYixVQUFBQSxHQUFHLENBQUNZLE1BQUosQ0FBVyxHQUFYLEVBQWdCZixJQUFoQixDQUFxQjtBQUFFaUIsWUFBQUEsT0FBTyxFQUFFLHdCQUFYO0FBQXFDQyxZQUFBQSxLQUFLO0FBQTFDLFdBQXJCOztBQXhCMEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsQ0FBOUIsRSxDQTRCQTs7QUFDQXJCLEdBQUcsQ0FBQ3NCLElBQUosQ0FBUyw0QkFBVCxFQUF1QyxVQUFDakIsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDbkQ7QUFDQSxNQUFNQyxXQUFXLEdBQUdGLEdBQUcsQ0FBQ0csTUFBSixDQUFXQyxJQUEvQixDQUZtRCxDQUluRDs7QUFDQWMsRUFBQUEsWUFBWSxDQUFDaEIsV0FBRCxDQUFaLENBQTBCaUIsT0FBMUIsSUFBcUMsQ0FBckMsQ0FMbUQsQ0FPbkQ7O0FBQ0FsQixFQUFBQSxHQUFHLENBQ0FZLE1BREgsQ0FDVSxHQURWLEVBRUdPLElBRkgsV0FHT2xCLFdBSFAsc0JBRzhCZ0IsWUFBWSxDQUFDaEIsV0FBRCxDQUFaLENBQTBCaUIsT0FIeEQ7QUFLRCxDQWJEO0FBZUE7Ozs7Ozs7Ozs7Ozs7OztBQWNBeEIsR0FBRyxDQUFDc0IsSUFBSixDQUFTLGlDQUFULEVBQTRDLFVBQUNqQixHQUFELEVBQU1DLEdBQU4sRUFBYztBQUFBLGtCQUM3QkQsR0FBRyxDQUFDcUIsSUFEeUI7QUFBQSxNQUNoREMsUUFEZ0QsYUFDaERBLFFBRGdEO0FBQUEsTUFDdENDLElBRHNDLGFBQ3RDQSxJQURzQyxFQUd4RDs7QUFDQSxNQUFNckIsV0FBVyxHQUFHRixHQUFHLENBQUNHLE1BQUosQ0FBV0MsSUFBL0I7QUFFQTs7Ozs7QUFJQWMsRUFBQUEsWUFBWSxDQUFDaEIsV0FBRCxDQUFaLENBQTBCc0IsUUFBMUIsQ0FBbUNDLElBQW5DLENBQXdDO0FBQUVILElBQUFBLFFBQVEsRUFBUkEsUUFBRjtBQUFZQyxJQUFBQSxJQUFJLEVBQUpBO0FBQVosR0FBeEMsRUFWd0QsQ0FZeEQ7O0FBQ0F0QixFQUFBQSxHQUFHLENBQUNZLE1BQUosQ0FBVyxHQUFYLEVBQWdCTyxJQUFoQixDQUFxQkYsWUFBWSxDQUFDaEIsV0FBRCxDQUFqQyxFQWJ3RCxDQWV4RDtBQUNELENBaEJEO0FBa0JBO0FBQ0E7O0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFFQTs7QUFDQVAsR0FBRyxDQUFDK0IsTUFBSixDQUFXLElBQVgsRUFBaUI7QUFBQSxTQUFNQyxPQUFPLENBQUNDLEdBQVIsQ0FBWSx3QkFBWixDQUFOO0FBQUEsQ0FBakIiLCJzb3VyY2VSb290IjoiL1VzZXJzL2VtL0Rlc2t0b3AvV3luY29kZS9SZWFjdEZ1bGxTdGFjay9NeS1BcHAtQmFja2VuZC9zcmMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyBmcm9tIFwiZXhwcmVzc1wiO1xuaW1wb3J0IGJvZHlQYXJzZXIgZnJvbSBcImJvZHktcGFyc2VyXCI7XG5pbXBvcnQgeyBNb25nb0NsaWVudCB9IGZyb20gXCJtb25nb2RiXCI7XG5cbi8vIFJlcXVlc3QgVHlwZXM6IEdldCxQb3N0KCtyZXF1ZXN0Ym9keSksUGF0Y2gsRGVsZXRlXG4vLyBydW46IG5weCBiYWJlbC1ub2RlIHNyYy9zZXJ2ZXIuanNcbi8vIEFkZGVkIGJvZHkgcGFyc2VyIGRlcGVuZGVuY2llc1xuXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5cbi8vUGFyc2VzIGpzb24gb2JqZWN0IHRoYXQgaXMgaW5jbHVkZWQgd2l0aCBwb3N0IHJlcXVlc3QuXG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcblxuLy9jb25uZWN0cyBtb25vZ29kYiB0byBleHByZXNzXG5cbmFwcC5nZXQoXCJhcGkvYXJ0aWNsZXMvOm5hbWVcIiwgYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgYXJ0aWNsZU5hbWUgPSByZXEucGFyYW1zLm5hbWU7XG5cbiAgICAvLyBDb25uZWN0IGZ1bmN0aW9uIGlzIEFzeW5jcm9udXNlLVJldHVybnMgYSBwcm9taXNlLUNhbiB1c2UgQXN5bmMgQXdhaXRcbiAgICAvL21vbmdvIGNsaWVudCBjb25uZWN0IHJldHVybnMgYSBjbGllbnQgb2JqLCBjYW4gYmUgdXNlZCB0byBxdWVyeSBkYi5cblxuICAgIGNvbnN0IGNsaWVudCA9IGF3YWl0IE1vbmdvQ2xpZW50LmNvbm5lY3QoXCJtb25nb2RiOi8vbG9jYWxob3N0OjI3MDE3XCIsIHtcbiAgICAgIHVzZU5ld1VybFBhcnNlcjogdHJ1ZVxuICAgIH0pO1xuXG4gICAgLy90byBxdWVyeSBvdXIgZGJcbiAgICBjb25zdCBkYiA9IGNsaWVudC5kYihcIm15LWFwcFwiKTtcblxuICAgIC8vdGhlbiBxdWVyeSBsaWtlIHRoaXNcbiAgICBjb25zdCBhcnRpY2xlSW5mbyA9IGF3YWl0IGRiXG4gICAgICAuY29sbGVjdGlvbihcImFydGljbGVzXCIpXG4gICAgICAuZmluZE9uZSh7IG5hbWU6IGFydGljbGVOYW1lIH0pO1xuXG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24oYXJ0aWNsZUluZm8pO1xuXG4gICAgLy9jbG9zZXMgY29ubmVjdGlvbiB0byBkYlxuICAgIGNsaWVudC5jbG9zZSgpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgbWVzc2FnZTogXCJFcnJvciBDb25uZWN0aW9uIHRvIERCXCIsIGVycm9yIH0pO1xuICB9XG59KTtcblxuLy9kZWZpbmUgYSBuZXcgZW5kIHBvaW50IHRvIHNlbmQgcmVxdWVzdCB0byB1cGRhdGUgdXB2b3RlcyB2aWEgcG9zdCByZXF1ZXN0XG5hcHAucG9zdChcIi9hcGkvYXJ0aWNsZXMvOm5hbWUvdXB2b3RlXCIsIChyZXEsIHJlcykgPT4ge1xuICAvL2dldCBuYW1lIGZvcm0gcGFyYW1zXG4gIGNvbnN0IGFydGljbGVOYW1lID0gcmVxLnBhcmFtcy5uYW1lO1xuXG4gIC8vdGFyZ2V0IHVwdm90ZXNcbiAgYXJ0aWNsZXNJbmZvW2FydGljbGVOYW1lXS51cHZvdGVzICs9IDE7XG5cbiAgLy9zZW5kaW5nIG1lc3NhZ2VcbiAgcmVzXG4gICAgLnN0YXR1cygyMDApXG4gICAgLnNlbmQoXG4gICAgICBgJHthcnRpY2xlTmFtZX0gbm93IGhhcyAke2FydGljbGVzSW5mb1thcnRpY2xlTmFtZV0udXB2b3Rlc30gdXB2b3Rlcy5gXG4gICAgKTtcbn0pO1xuXG4vKlxuLS0tLS0tLS0gQ09NTUVOVCBGVU5DVElPTiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuY3VybHkgYnJhY2VzIGlzIHRoZSBib2R5IG9mIG91ciBjYWxsIGJhY2sgKHJlcSxyZXMpLlxudGVzdCBpbiBwb3N0bWFuIHRvIGRldGVtcmllbiB3aGF0IHRoZSBib2R5IHdpbGwgbG9vayBsaWtlLlxuLVNlbmQgcmVxdWVzdCB0byBhZGQgY29tbWVudCBlbmQtcG9pbnQuXG4tIEluIFBvc3RNYW4gYXBwbHkgdXJsICsgcGF0aCBpbiBQb3N0LlxuLSBzZWxlY3RlZCBvcHRpb25zIGluIFBvc3RNYW46IFBvc3QsIEJvZHksIFJhdywgSlNPTlxuLSBGaWxsIEJvZHkgY29udGVudCBqc29uIGZvcm1hdFxuLSBhY2Nlc3MgZGF0YSB2aWEgdmlhIGFwcC5wb3N0Li4uXG4tIERhdGEgbmVlZGVkIGlzIGluIHJlcS5ib2R5XG4tIFwiICAgXCIgICBcIiAgIFwiIFwidXNlcm5hbWVcIiBhbmQgXCJ0ZXh0XCIgXG4tIGdldCBhcnRpY2xlTmFtZSBmb3JtIHVybCBwYXJhbXNcbi0gTmV4dCBKdXN0IGFkZCB0aGUgbmV3IGNvbW1lbnQgaW4gdGhlIHJlcS5ib2R5IHRvICAgICAgY29tbWVudHMgW10gaW4gdGhlIHNlbGVjdGVkIGFydGljbGUuXG4qL1xuYXBwLnBvc3QoXCIvYXBpL2FydGljbGVzLzpuYW1lL2FkZC1jb21tZW50XCIsIChyZXEsIHJlcykgPT4ge1xuICBjb25zdCB7IHVzZXJuYW1lLCB0ZXh0IH0gPSByZXEuYm9keTtcblxuICAvLyBnZXQgYXJ0aWNsZU5hbWUgZm9ybSB1cmwgcGFyYW1zXG4gIGNvbnN0IGFydGljbGVOYW1lID0gcmVxLnBhcmFtcy5uYW1lO1xuXG4gIC8qXG4gIGFjY2Vzc2VzIGFycmF5IC0+TmFtZS0+Y29tbWVudHMgdGhlbiBhZGRzIHRoZSB1c2VybmFtZSBhbmQgdGV4dCB2aWEgLnB1c2hcbiAgc2F2aW5nIHRoZSBwcmV2aW91cyBwdXNoXG4gICovXG4gIGFydGljbGVzSW5mb1thcnRpY2xlTmFtZV0uY29tbWVudHMucHVzaCh7IHVzZXJuYW1lLCB0ZXh0IH0pO1xuXG4gIC8vIHJlc3Bzb25zZSAoMjAwKVxuICByZXMuc3RhdHVzKDIwMCkuc2VuZChhcnRpY2xlc0luZm9bYXJ0aWNsZU5hbWVdKTtcblxuICAvLyByZXMuc3RhdHVzKDIwMCkuc2VuZChhcnRpY2xlc0luZm9bYXJ0aWNsZU5hbWVdKTtcbn0pO1xuXG4vKiAtLS0gTWlzYyBHZXRzIGFuZCBQb3N0IC0tLS0tLSovXG4vLyBhcHAuZ2V0KFwiL2hlbGxvXCIsIChyZXEsIHJlcykgPT4gcmVzLnNlbmQoXCJIZWxsbyBcIikpO1xuXG4vKiBzZXJ2ZXIgc2lkZTogc2VydmVyIHRha2VzIHZhbHVlIG91dCBwZiBzcGVjaWZpZWQgc2VjdGlvbiBvZiB1cmwgYW5kIHB1dCBpdCBpbnRvICAgICAgIHJlc3BvbnNlIHVzaW5nIHVybCBwYXJhbXMgKi9cblxuLy8gYXBwLmdldChcIi9oZWxsby86bmFtZVwiLCAocmVxLCByZXMpID0+IHJlcy5zZW5kKGBIZWxsbyAke3JlcS5wYXJhbXMubmFtZX1gKSk7XG5cbi8vY2xpZW50IHNpZGVcbi8vIGFwcC5wb3N0KFwiL2hlbGxvXCIsIChyZXEsIHJlcykgPT4gcmVzLnNlbmQoYEhlbGxvICR7cmVxLmJvZHkubmFtZX0hYCkpO1xuXG4vL2xpc3RlbiBvbiBwb3J0Li4uXG5hcHAubGlzdGVuKDgwMDAsICgpID0+IGNvbnNvbGUubG9nKFwiTGlzdGVuaW5nIG9uIHBvcnQgODAwMFwiKSk7XG4iXX0=",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "app",
        "use",
        "bodyParser",
        "json",
        "get",
        "req",
        "res",
        "articleName",
        "params",
        "name",
        "MongoClient",
        "connect",
        "useNewUrlParser",
        "client",
        "db",
        "collection",
        "findOne",
        "articleInfo",
        "status",
        "close",
        "message",
        "error",
        "post",
        "articlesInfo",
        "upvotes",
        "send",
        "body",
        "username",
        "text",
        "comments",
        "push",
        "listen",
        "console",
        "log"
      ],
      "mappings": ";;AAAA;;AACA;;AACA;;;;AAEA;AACA;AACA;AAEA,IAAMA,GAAG,GAAG,0BAAZ,C,CAEA;;AACAA,GAAG,CAACC,GAAJ,CAAQC,uBAAWC,IAAX,EAAR,E,CAEA;;AAEAH,GAAG,CAACI,GAAJ,CAAQ,oBAAR,EAA8B,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEpBC,UAAAA,WAFoB,GAENF,GAAG,CAACG,MAAJ,CAAWC,IAFL,EAI1B;AACA;;AAL0B;AAAA,0CAOLC,qBAAYC,OAAZ,CAAoB,2BAApB,EAAiD;AACpEC,YAAAA,eAAe,EAAE;AADmD,WAAjD,CAPK;;AAAA;AAOpBC,UAAAA,MAPoB;AAW1B;AACMC,UAAAA,EAZoB,GAYfD,MAAM,CAACC,EAAP,CAAU,QAAV,CAZe,EAc1B;;AAd0B;AAAA,0CAeAA,EAAE,CACzBC,UADuB,CACZ,UADY,EAEvBC,OAFuB,CAEf;AAAEP,YAAAA,IAAI,EAAEF;AAAR,WAFe,CAfA;;AAAA;AAepBU,UAAAA,WAfoB;AAmB1BX,UAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBf,IAAhB,CAAqBc,WAArB,EAnB0B,CAqB1B;;AACAJ,UAAAA,MAAM,CAACM,KAAP;AAtB0B;AAAA;;AAAA;AAAA;AAAA;AAwB1Bb,UAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBf,IAAhB,CAAqB;AAAEiB,YAAAA,OAAO,EAAE,wBAAX;AAAqCC,YAAAA,KAAK;AAA1C,WAArB;;AAxB0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA9B,E,CA4BA;;AACArB,GAAG,CAACsB,IAAJ,CAAS,4BAAT,EAAuC,UAACjB,GAAD,EAAMC,GAAN,EAAc;AACnD;AACA,MAAMC,WAAW,GAAGF,GAAG,CAACG,MAAJ,CAAWC,IAA/B,CAFmD,CAInD;;AACAc,EAAAA,YAAY,CAAChB,WAAD,CAAZ,CAA0BiB,OAA1B,IAAqC,CAArC,CALmD,CAOnD;;AACAlB,EAAAA,GAAG,CACAY,MADH,CACU,GADV,EAEGO,IAFH,WAGOlB,WAHP,sBAG8BgB,YAAY,CAAChB,WAAD,CAAZ,CAA0BiB,OAHxD;AAKD,CAbD;AAeA;;;;;;;;;;;;;;;AAcAxB,GAAG,CAACsB,IAAJ,CAAS,iCAAT,EAA4C,UAACjB,GAAD,EAAMC,GAAN,EAAc;AAAA,kBAC7BD,GAAG,CAACqB,IADyB;AAAA,MAChDC,QADgD,aAChDA,QADgD;AAAA,MACtCC,IADsC,aACtCA,IADsC,EAGxD;;AACA,MAAMrB,WAAW,GAAGF,GAAG,CAACG,MAAJ,CAAWC,IAA/B;AAEA;;;;;AAIAc,EAAAA,YAAY,CAAChB,WAAD,CAAZ,CAA0BsB,QAA1B,CAAmCC,IAAnC,CAAwC;AAAEH,IAAAA,QAAQ,EAARA,QAAF;AAAYC,IAAAA,IAAI,EAAJA;AAAZ,GAAxC,EAVwD,CAYxD;;AACAtB,EAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBO,IAAhB,CAAqBF,YAAY,CAAChB,WAAD,CAAjC,EAbwD,CAexD;AACD,CAhBD;AAkBA;AACA;;AAEA;AAEA;AAEA;AACA;AAEA;;AACAP,GAAG,CAAC+B,MAAJ,CAAW,IAAX,EAAiB;AAAA,SAAMC,OAAO,CAACC,GAAR,CAAY,wBAAZ,CAAN;AAAA,CAAjB",
      "sourceRoot": "/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend/src",
      "sourcesContent": [
        "import express from \"express\";\nimport bodyParser from \"body-parser\";\nimport { MongoClient } from \"mongodb\";\n\n// Request Types: Get,Post(+requestbody),Patch,Delete\n// run: npx babel-node src/server.js\n// Added body parser dependencies\n\nconst app = express();\n\n//Parses json object that is included with post request.\napp.use(bodyParser.json());\n\n//connects monogodb to express\n\napp.get(\"api/articles/:name\", async (req, res) => {\n  try {\n    const articleName = req.params.name;\n\n    // Connect function is Asyncronuse-Returns a promise-Can use Async Await\n    //mongo client connect returns a client obj, can be used to query db.\n\n    const client = await MongoClient.connect(\"mongodb://localhost:27017\", {\n      useNewUrlParser: true\n    });\n\n    //to query our db\n    const db = client.db(\"my-app\");\n\n    //then query like this\n    const articleInfo = await db\n      .collection(\"articles\")\n      .findOne({ name: articleName });\n\n    res.status(200).json(articleInfo);\n\n    //closes connection to db\n    client.close();\n  } catch (error) {\n    res.status(500).json({ message: \"Error Connection to DB\", error });\n  }\n});\n\n//define a new end point to send request to update upvotes via post request\napp.post(\"/api/articles/:name/upvote\", (req, res) => {\n  //get name form params\n  const articleName = req.params.name;\n\n  //target upvotes\n  articlesInfo[articleName].upvotes += 1;\n\n  //sending message\n  res\n    .status(200)\n    .send(\n      `${articleName} now has ${articlesInfo[articleName].upvotes} upvotes.`\n    );\n});\n\n/*\n-------- COMMENT FUNCTION -----------------------------\ncurly braces is the body of our call back (req,res).\ntest in postman to detemrien what the body will look like.\n-Send request to add comment end-point.\n- In PostMan apply url + path in Post.\n- selected options in PostMan: Post, Body, Raw, JSON\n- Fill Body content json format\n- access data via via app.post...\n- Data needed is in req.body\n- \"   \"   \"   \" \"username\" and \"text\" \n- get articleName form url params\n- Next Just add the new comment in the req.body to      comments [] in the selected article.\n*/\napp.post(\"/api/articles/:name/add-comment\", (req, res) => {\n  const { username, text } = req.body;\n\n  // get articleName form url params\n  const articleName = req.params.name;\n\n  /*\n  accesses array ->Name->comments then adds the username and text via .push\n  saving the previous push\n  */\n  articlesInfo[articleName].comments.push({ username, text });\n\n  // respsonse (200)\n  res.status(200).send(articlesInfo[articleName]);\n\n  // res.status(200).send(articlesInfo[articleName]);\n});\n\n/* --- Misc Gets and Post ------*/\n// app.get(\"/hello\", (req, res) => res.send(\"Hello \"));\n\n/* server side: server takes value out pf specified section of url and put it into       response using url params */\n\n// app.get(\"/hello/:name\", (req, res) => res.send(`Hello ${req.params.name}`));\n\n//client side\n// app.post(\"/hello\", (req, res) => res.send(`Hello ${req.body.name}!`));\n\n//listen on port...\napp.listen(8000, () => console.log(\"Listening on port 8000\"));\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1573757411820
  }
}