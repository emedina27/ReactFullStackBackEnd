{
  "{\"sourceRoot\":\"/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend\",\"filename\":\"/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend/src/server.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend\",\"plugins\":[{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.7.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend",
      "filename": "/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend/src/server.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend/src/server.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend/src/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend/src",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _bodyParser = _interopRequireDefault(require(\"body-parser\"));\n\nvar _mongodb = require(\"mongodb\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n// Request Types: Get,Post(+requestbody),Patch,Delete\n// run: npx babel-node src/server.js\n// Added body parser dependencies\nvar app = (0, _express[\"default\"])(); //Parses json object that is included with post request.\n\napp.use(_bodyParser[\"default\"].json()); //------ connects monogodb to express -------------------------------------------------\n\napp.get(\"/api/articles/:name\", function _callee(req, res) {\n  var articleName, client, db, articleInfo;\n  return regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          articleName = req.params.name;\n          _context.next = 4;\n          return regeneratorRuntime.awrap(_mongodb.MongoClient.connect(\"mongodb://localhost:27017\", {\n            useNewUrlParser: true\n          }));\n\n        case 4:\n          client = _context.sent;\n          db = client.db(\"my-app\");\n          _context.next = 8;\n          return regeneratorRuntime.awrap(db.collection(\"articles\").findOne({\n            name: articleName\n          }));\n\n        case 8:\n          articleInfo = _context.sent;\n          res.status(200).json(articleInfo);\n          client.close();\n          _context.next = 16;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](0);\n          res.status(500).json({\n            message: \"Error Connection to DB\",\n            error: _context.t0\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 13]]);\n}); //-------------------------------------------------------------------------------------\n//define a new end point to send request to update upvotes via post request\n\napp.post(\"/api/articles/:name/upvote\", function (req, res) {\n  //get name form params\n  var articleName = req.params.name; //target upvotes\n\n  articlesInfo[articleName].upvotes += 1; //sending message\n\n  res.status(200).send(\"\".concat(articleName, \" now has \").concat(articlesInfo[articleName].upvotes, \" upvotes.\"));\n});\n/*\n-------- COMMENT FUNCTION -----------------------------\ncurly braces is the body of our call back (req,res).\ntest in postman to detemrien what the body will look like.\n-Send request to add comment end-point.\n- In PostMan apply url + path in Post.\n- selected options in PostMan: Post, Body, Raw, JSON\n- Fill Body content json format\n- access data via via app.post...\n- Data needed is in req.body\n- \"   \"   \"   \" \"username\" and \"text\" \n- get articleName form url params\n- Next Just add the new comment in the req.body to      comments [] in the selected article.\n*/\n\napp.post(\"/api/articles/:name/add-comment\", function (req, res) {\n  var _req$body = req.body,\n      username = _req$body.username,\n      text = _req$body.text; // get articleName form url params\n\n  var articleName = req.params.name;\n  /*\n  accesses array ->Name->comments then adds the username and text via .push\n  saving the previous push\n  */\n\n  articlesInfo[articleName].comments.push({\n    username: username,\n    text: text\n  }); // respsonse (200)\n\n  res.status(200).send(articlesInfo[articleName]); // res.status(200).send(articlesInfo[articleName]);\n});\n/* --- Misc Gets and Post ------*/\n// app.get(\"/hello\", (req, res) => res.send(\"Hello \"));\n\n/* server side: server takes value out pf specified section of url and put it into       response using url params */\n// app.get(\"/hello/:name\", (req, res) => res.send(`Hello ${req.params.name}`));\n//client side\n// app.post(\"/hello\", (req, res) => res.send(`Hello ${req.body.name}!`));\n//listen on port...\n\napp.listen(8000, function () {\n  return console.log(\"Listening on port 8000\");\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNlcnZlci5qcyJdLCJuYW1lcyI6WyJhcHAiLCJ1c2UiLCJib2R5UGFyc2VyIiwianNvbiIsImdldCIsInJlcSIsInJlcyIsImFydGljbGVOYW1lIiwicGFyYW1zIiwibmFtZSIsIk1vbmdvQ2xpZW50IiwiY29ubmVjdCIsInVzZU5ld1VybFBhcnNlciIsImNsaWVudCIsImRiIiwiY29sbGVjdGlvbiIsImZpbmRPbmUiLCJhcnRpY2xlSW5mbyIsInN0YXR1cyIsImNsb3NlIiwibWVzc2FnZSIsImVycm9yIiwicG9zdCIsImFydGljbGVzSW5mbyIsInVwdm90ZXMiLCJzZW5kIiwiYm9keSIsInVzZXJuYW1lIiwidGV4dCIsImNvbW1lbnRzIiwicHVzaCIsImxpc3RlbiIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFFQSxJQUFNQSxHQUFHLEdBQUcsMEJBQVosQyxDQUVBOztBQUNBQSxHQUFHLENBQUNDLEdBQUosQ0FBUUMsdUJBQVdDLElBQVgsRUFBUixFLENBRUE7O0FBRUFILEdBQUcsQ0FBQ0ksR0FBSixDQUFRLHFCQUFSLEVBQStCLGlCQUFPQyxHQUFQLEVBQVlDLEdBQVo7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFckJDLFVBQUFBLFdBRnFCLEdBRVBGLEdBQUcsQ0FBQ0csTUFBSixDQUFXQyxJQUZKO0FBQUE7QUFBQSwwQ0FJTkMscUJBQVlDLE9BQVosQ0FBb0IsMkJBQXBCLEVBQWlEO0FBQ3BFQyxZQUFBQSxlQUFlLEVBQUU7QUFEbUQsV0FBakQsQ0FKTTs7QUFBQTtBQUlyQkMsVUFBQUEsTUFKcUI7QUFRckJDLFVBQUFBLEVBUnFCLEdBUWhCRCxNQUFNLENBQUNDLEVBQVAsQ0FBVSxRQUFWLENBUmdCO0FBQUE7QUFBQSwwQ0FVREEsRUFBRSxDQUN6QkMsVUFEdUIsQ0FDWixVQURZLEVBRXZCQyxPQUZ1QixDQUVmO0FBQUVQLFlBQUFBLElBQUksRUFBRUY7QUFBUixXQUZlLENBVkM7O0FBQUE7QUFVckJVLFVBQUFBLFdBVnFCO0FBYTNCWCxVQUFBQSxHQUFHLENBQUNZLE1BQUosQ0FBVyxHQUFYLEVBQWdCZixJQUFoQixDQUFxQmMsV0FBckI7QUFFQUosVUFBQUEsTUFBTSxDQUFDTSxLQUFQO0FBZjJCO0FBQUE7O0FBQUE7QUFBQTtBQUFBO0FBaUIzQmIsVUFBQUEsR0FBRyxDQUFDWSxNQUFKLENBQVcsR0FBWCxFQUFnQmYsSUFBaEIsQ0FBcUI7QUFBRWlCLFlBQUFBLE9BQU8sRUFBRSx3QkFBWDtBQUFxQ0MsWUFBQUEsS0FBSztBQUExQyxXQUFyQjs7QUFqQjJCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLENBQS9CLEUsQ0FxQkE7QUFDQTs7QUFDQXJCLEdBQUcsQ0FBQ3NCLElBQUosQ0FBUyw0QkFBVCxFQUF1QyxVQUFDakIsR0FBRCxFQUFNQyxHQUFOLEVBQWM7QUFDbkQ7QUFDQSxNQUFNQyxXQUFXLEdBQUdGLEdBQUcsQ0FBQ0csTUFBSixDQUFXQyxJQUEvQixDQUZtRCxDQUluRDs7QUFDQWMsRUFBQUEsWUFBWSxDQUFDaEIsV0FBRCxDQUFaLENBQTBCaUIsT0FBMUIsSUFBcUMsQ0FBckMsQ0FMbUQsQ0FPbkQ7O0FBQ0FsQixFQUFBQSxHQUFHLENBQ0FZLE1BREgsQ0FDVSxHQURWLEVBRUdPLElBRkgsV0FHT2xCLFdBSFAsc0JBRzhCZ0IsWUFBWSxDQUFDaEIsV0FBRCxDQUFaLENBQTBCaUIsT0FIeEQ7QUFLRCxDQWJEO0FBZUE7Ozs7Ozs7Ozs7Ozs7OztBQWNBeEIsR0FBRyxDQUFDc0IsSUFBSixDQUFTLGlDQUFULEVBQTRDLFVBQUNqQixHQUFELEVBQU1DLEdBQU4sRUFBYztBQUFBLGtCQUM3QkQsR0FBRyxDQUFDcUIsSUFEeUI7QUFBQSxNQUNoREMsUUFEZ0QsYUFDaERBLFFBRGdEO0FBQUEsTUFDdENDLElBRHNDLGFBQ3RDQSxJQURzQyxFQUd4RDs7QUFDQSxNQUFNckIsV0FBVyxHQUFHRixHQUFHLENBQUNHLE1BQUosQ0FBV0MsSUFBL0I7QUFFQTs7Ozs7QUFJQWMsRUFBQUEsWUFBWSxDQUFDaEIsV0FBRCxDQUFaLENBQTBCc0IsUUFBMUIsQ0FBbUNDLElBQW5DLENBQXdDO0FBQUVILElBQUFBLFFBQVEsRUFBUkEsUUFBRjtBQUFZQyxJQUFBQSxJQUFJLEVBQUpBO0FBQVosR0FBeEMsRUFWd0QsQ0FZeEQ7O0FBQ0F0QixFQUFBQSxHQUFHLENBQUNZLE1BQUosQ0FBVyxHQUFYLEVBQWdCTyxJQUFoQixDQUFxQkYsWUFBWSxDQUFDaEIsV0FBRCxDQUFqQyxFQWJ3RCxDQWV4RDtBQUNELENBaEJEO0FBa0JBO0FBQ0E7O0FBRUE7QUFFQTtBQUVBO0FBQ0E7QUFFQTs7QUFDQVAsR0FBRyxDQUFDK0IsTUFBSixDQUFXLElBQVgsRUFBaUI7QUFBQSxTQUFNQyxPQUFPLENBQUNDLEdBQVIsQ0FBWSx3QkFBWixDQUFOO0FBQUEsQ0FBakIiLCJzb3VyY2VSb290IjoiL1VzZXJzL2VtL0Rlc2t0b3AvV3luY29kZS9SZWFjdEZ1bGxTdGFjay9NeS1BcHAtQmFja2VuZC9zcmMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZXhwcmVzcyBmcm9tIFwiZXhwcmVzc1wiO1xuaW1wb3J0IGJvZHlQYXJzZXIgZnJvbSBcImJvZHktcGFyc2VyXCI7XG5pbXBvcnQgeyBNb25nb0NsaWVudCB9IGZyb20gXCJtb25nb2RiXCI7XG5cbi8vIFJlcXVlc3QgVHlwZXM6IEdldCxQb3N0KCtyZXF1ZXN0Ym9keSksUGF0Y2gsRGVsZXRlXG4vLyBydW46IG5weCBiYWJlbC1ub2RlIHNyYy9zZXJ2ZXIuanNcbi8vIEFkZGVkIGJvZHkgcGFyc2VyIGRlcGVuZGVuY2llc1xuXG5jb25zdCBhcHAgPSBleHByZXNzKCk7XG5cbi8vUGFyc2VzIGpzb24gb2JqZWN0IHRoYXQgaXMgaW5jbHVkZWQgd2l0aCBwb3N0IHJlcXVlc3QuXG5hcHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcblxuLy8tLS0tLS0gY29ubmVjdHMgbW9ub2dvZGIgdG8gZXhwcmVzcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbmFwcC5nZXQoXCIvYXBpL2FydGljbGVzLzpuYW1lXCIsIGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGFydGljbGVOYW1lID0gcmVxLnBhcmFtcy5uYW1lO1xuXG4gICAgY29uc3QgY2xpZW50ID0gYXdhaXQgTW9uZ29DbGllbnQuY29ubmVjdChcIm1vbmdvZGI6Ly9sb2NhbGhvc3Q6MjcwMTdcIiwge1xuICAgICAgdXNlTmV3VXJsUGFyc2VyOiB0cnVlXG4gICAgfSk7XG5cbiAgICBjb25zdCBkYiA9IGNsaWVudC5kYihcIm15LWFwcFwiKTtcblxuICAgIGNvbnN0IGFydGljbGVJbmZvID0gYXdhaXQgZGJcbiAgICAgIC5jb2xsZWN0aW9uKFwiYXJ0aWNsZXNcIilcbiAgICAgIC5maW5kT25lKHsgbmFtZTogYXJ0aWNsZU5hbWUgfSk7XG4gICAgcmVzLnN0YXR1cygyMDApLmpzb24oYXJ0aWNsZUluZm8pO1xuXG4gICAgY2xpZW50LmNsb3NlKCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyBtZXNzYWdlOiBcIkVycm9yIENvbm5lY3Rpb24gdG8gREJcIiwgZXJyb3IgfSk7XG4gIH1cbn0pO1xuXG4vLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vZGVmaW5lIGEgbmV3IGVuZCBwb2ludCB0byBzZW5kIHJlcXVlc3QgdG8gdXBkYXRlIHVwdm90ZXMgdmlhIHBvc3QgcmVxdWVzdFxuYXBwLnBvc3QoXCIvYXBpL2FydGljbGVzLzpuYW1lL3Vwdm90ZVwiLCAocmVxLCByZXMpID0+IHtcbiAgLy9nZXQgbmFtZSBmb3JtIHBhcmFtc1xuICBjb25zdCBhcnRpY2xlTmFtZSA9IHJlcS5wYXJhbXMubmFtZTtcblxuICAvL3RhcmdldCB1cHZvdGVzXG4gIGFydGljbGVzSW5mb1thcnRpY2xlTmFtZV0udXB2b3RlcyArPSAxO1xuXG4gIC8vc2VuZGluZyBtZXNzYWdlXG4gIHJlc1xuICAgIC5zdGF0dXMoMjAwKVxuICAgIC5zZW5kKFxuICAgICAgYCR7YXJ0aWNsZU5hbWV9IG5vdyBoYXMgJHthcnRpY2xlc0luZm9bYXJ0aWNsZU5hbWVdLnVwdm90ZXN9IHVwdm90ZXMuYFxuICAgICk7XG59KTtcblxuLypcbi0tLS0tLS0tIENPTU1FTlQgRlVOQ1RJT04gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmN1cmx5IGJyYWNlcyBpcyB0aGUgYm9keSBvZiBvdXIgY2FsbCBiYWNrIChyZXEscmVzKS5cbnRlc3QgaW4gcG9zdG1hbiB0byBkZXRlbXJpZW4gd2hhdCB0aGUgYm9keSB3aWxsIGxvb2sgbGlrZS5cbi1TZW5kIHJlcXVlc3QgdG8gYWRkIGNvbW1lbnQgZW5kLXBvaW50LlxuLSBJbiBQb3N0TWFuIGFwcGx5IHVybCArIHBhdGggaW4gUG9zdC5cbi0gc2VsZWN0ZWQgb3B0aW9ucyBpbiBQb3N0TWFuOiBQb3N0LCBCb2R5LCBSYXcsIEpTT05cbi0gRmlsbCBCb2R5IGNvbnRlbnQganNvbiBmb3JtYXRcbi0gYWNjZXNzIGRhdGEgdmlhIHZpYSBhcHAucG9zdC4uLlxuLSBEYXRhIG5lZWRlZCBpcyBpbiByZXEuYm9keVxuLSBcIiAgIFwiICAgXCIgICBcIiBcInVzZXJuYW1lXCIgYW5kIFwidGV4dFwiIFxuLSBnZXQgYXJ0aWNsZU5hbWUgZm9ybSB1cmwgcGFyYW1zXG4tIE5leHQgSnVzdCBhZGQgdGhlIG5ldyBjb21tZW50IGluIHRoZSByZXEuYm9keSB0byAgICAgIGNvbW1lbnRzIFtdIGluIHRoZSBzZWxlY3RlZCBhcnRpY2xlLlxuKi9cbmFwcC5wb3N0KFwiL2FwaS9hcnRpY2xlcy86bmFtZS9hZGQtY29tbWVudFwiLCAocmVxLCByZXMpID0+IHtcbiAgY29uc3QgeyB1c2VybmFtZSwgdGV4dCB9ID0gcmVxLmJvZHk7XG5cbiAgLy8gZ2V0IGFydGljbGVOYW1lIGZvcm0gdXJsIHBhcmFtc1xuICBjb25zdCBhcnRpY2xlTmFtZSA9IHJlcS5wYXJhbXMubmFtZTtcblxuICAvKlxuICBhY2Nlc3NlcyBhcnJheSAtPk5hbWUtPmNvbW1lbnRzIHRoZW4gYWRkcyB0aGUgdXNlcm5hbWUgYW5kIHRleHQgdmlhIC5wdXNoXG4gIHNhdmluZyB0aGUgcHJldmlvdXMgcHVzaFxuICAqL1xuICBhcnRpY2xlc0luZm9bYXJ0aWNsZU5hbWVdLmNvbW1lbnRzLnB1c2goeyB1c2VybmFtZSwgdGV4dCB9KTtcblxuICAvLyByZXNwc29uc2UgKDIwMClcbiAgcmVzLnN0YXR1cygyMDApLnNlbmQoYXJ0aWNsZXNJbmZvW2FydGljbGVOYW1lXSk7XG5cbiAgLy8gcmVzLnN0YXR1cygyMDApLnNlbmQoYXJ0aWNsZXNJbmZvW2FydGljbGVOYW1lXSk7XG59KTtcblxuLyogLS0tIE1pc2MgR2V0cyBhbmQgUG9zdCAtLS0tLS0qL1xuLy8gYXBwLmdldChcIi9oZWxsb1wiLCAocmVxLCByZXMpID0+IHJlcy5zZW5kKFwiSGVsbG8gXCIpKTtcblxuLyogc2VydmVyIHNpZGU6IHNlcnZlciB0YWtlcyB2YWx1ZSBvdXQgcGYgc3BlY2lmaWVkIHNlY3Rpb24gb2YgdXJsIGFuZCBwdXQgaXQgaW50byAgICAgICByZXNwb25zZSB1c2luZyB1cmwgcGFyYW1zICovXG5cbi8vIGFwcC5nZXQoXCIvaGVsbG8vOm5hbWVcIiwgKHJlcSwgcmVzKSA9PiByZXMuc2VuZChgSGVsbG8gJHtyZXEucGFyYW1zLm5hbWV9YCkpO1xuXG4vL2NsaWVudCBzaWRlXG4vLyBhcHAucG9zdChcIi9oZWxsb1wiLCAocmVxLCByZXMpID0+IHJlcy5zZW5kKGBIZWxsbyAke3JlcS5ib2R5Lm5hbWV9IWApKTtcblxuLy9saXN0ZW4gb24gcG9ydC4uLlxuYXBwLmxpc3Rlbig4MDAwLCAoKSA9PiBjb25zb2xlLmxvZyhcIkxpc3RlbmluZyBvbiBwb3J0IDgwMDBcIikpO1xuIl19",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "app",
        "use",
        "bodyParser",
        "json",
        "get",
        "req",
        "res",
        "articleName",
        "params",
        "name",
        "MongoClient",
        "connect",
        "useNewUrlParser",
        "client",
        "db",
        "collection",
        "findOne",
        "articleInfo",
        "status",
        "close",
        "message",
        "error",
        "post",
        "articlesInfo",
        "upvotes",
        "send",
        "body",
        "username",
        "text",
        "comments",
        "push",
        "listen",
        "console",
        "log"
      ],
      "mappings": ";;AAAA;;AACA;;AACA;;;;AAEA;AACA;AACA;AAEA,IAAMA,GAAG,GAAG,0BAAZ,C,CAEA;;AACAA,GAAG,CAACC,GAAJ,CAAQC,uBAAWC,IAAX,EAAR,E,CAEA;;AAEAH,GAAG,CAACI,GAAJ,CAAQ,qBAAR,EAA+B,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAErBC,UAAAA,WAFqB,GAEPF,GAAG,CAACG,MAAJ,CAAWC,IAFJ;AAAA;AAAA,0CAINC,qBAAYC,OAAZ,CAAoB,2BAApB,EAAiD;AACpEC,YAAAA,eAAe,EAAE;AADmD,WAAjD,CAJM;;AAAA;AAIrBC,UAAAA,MAJqB;AAQrBC,UAAAA,EARqB,GAQhBD,MAAM,CAACC,EAAP,CAAU,QAAV,CARgB;AAAA;AAAA,0CAUDA,EAAE,CACzBC,UADuB,CACZ,UADY,EAEvBC,OAFuB,CAEf;AAAEP,YAAAA,IAAI,EAAEF;AAAR,WAFe,CAVC;;AAAA;AAUrBU,UAAAA,WAVqB;AAa3BX,UAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBf,IAAhB,CAAqBc,WAArB;AAEAJ,UAAAA,MAAM,CAACM,KAAP;AAf2B;AAAA;;AAAA;AAAA;AAAA;AAiB3Bb,UAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBf,IAAhB,CAAqB;AAAEiB,YAAAA,OAAO,EAAE,wBAAX;AAAqCC,YAAAA,KAAK;AAA1C,WAArB;;AAjB2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA/B,E,CAqBA;AACA;;AACArB,GAAG,CAACsB,IAAJ,CAAS,4BAAT,EAAuC,UAACjB,GAAD,EAAMC,GAAN,EAAc;AACnD;AACA,MAAMC,WAAW,GAAGF,GAAG,CAACG,MAAJ,CAAWC,IAA/B,CAFmD,CAInD;;AACAc,EAAAA,YAAY,CAAChB,WAAD,CAAZ,CAA0BiB,OAA1B,IAAqC,CAArC,CALmD,CAOnD;;AACAlB,EAAAA,GAAG,CACAY,MADH,CACU,GADV,EAEGO,IAFH,WAGOlB,WAHP,sBAG8BgB,YAAY,CAAChB,WAAD,CAAZ,CAA0BiB,OAHxD;AAKD,CAbD;AAeA;;;;;;;;;;;;;;;AAcAxB,GAAG,CAACsB,IAAJ,CAAS,iCAAT,EAA4C,UAACjB,GAAD,EAAMC,GAAN,EAAc;AAAA,kBAC7BD,GAAG,CAACqB,IADyB;AAAA,MAChDC,QADgD,aAChDA,QADgD;AAAA,MACtCC,IADsC,aACtCA,IADsC,EAGxD;;AACA,MAAMrB,WAAW,GAAGF,GAAG,CAACG,MAAJ,CAAWC,IAA/B;AAEA;;;;;AAIAc,EAAAA,YAAY,CAAChB,WAAD,CAAZ,CAA0BsB,QAA1B,CAAmCC,IAAnC,CAAwC;AAAEH,IAAAA,QAAQ,EAARA,QAAF;AAAYC,IAAAA,IAAI,EAAJA;AAAZ,GAAxC,EAVwD,CAYxD;;AACAtB,EAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBO,IAAhB,CAAqBF,YAAY,CAAChB,WAAD,CAAjC,EAbwD,CAexD;AACD,CAhBD;AAkBA;AACA;;AAEA;AAEA;AAEA;AACA;AAEA;;AACAP,GAAG,CAAC+B,MAAJ,CAAW,IAAX,EAAiB;AAAA,SAAMC,OAAO,CAACC,GAAR,CAAY,wBAAZ,CAAN;AAAA,CAAjB",
      "sourceRoot": "/Users/em/Desktop/Wyncode/ReactFullStack/My-App-Backend/src",
      "sourcesContent": [
        "import express from \"express\";\nimport bodyParser from \"body-parser\";\nimport { MongoClient } from \"mongodb\";\n\n// Request Types: Get,Post(+requestbody),Patch,Delete\n// run: npx babel-node src/server.js\n// Added body parser dependencies\n\nconst app = express();\n\n//Parses json object that is included with post request.\napp.use(bodyParser.json());\n\n//------ connects monogodb to express -------------------------------------------------\n\napp.get(\"/api/articles/:name\", async (req, res) => {\n  try {\n    const articleName = req.params.name;\n\n    const client = await MongoClient.connect(\"mongodb://localhost:27017\", {\n      useNewUrlParser: true\n    });\n\n    const db = client.db(\"my-app\");\n\n    const articleInfo = await db\n      .collection(\"articles\")\n      .findOne({ name: articleName });\n    res.status(200).json(articleInfo);\n\n    client.close();\n  } catch (error) {\n    res.status(500).json({ message: \"Error Connection to DB\", error });\n  }\n});\n\n//-------------------------------------------------------------------------------------\n//define a new end point to send request to update upvotes via post request\napp.post(\"/api/articles/:name/upvote\", (req, res) => {\n  //get name form params\n  const articleName = req.params.name;\n\n  //target upvotes\n  articlesInfo[articleName].upvotes += 1;\n\n  //sending message\n  res\n    .status(200)\n    .send(\n      `${articleName} now has ${articlesInfo[articleName].upvotes} upvotes.`\n    );\n});\n\n/*\n-------- COMMENT FUNCTION -----------------------------\ncurly braces is the body of our call back (req,res).\ntest in postman to detemrien what the body will look like.\n-Send request to add comment end-point.\n- In PostMan apply url + path in Post.\n- selected options in PostMan: Post, Body, Raw, JSON\n- Fill Body content json format\n- access data via via app.post...\n- Data needed is in req.body\n- \"   \"   \"   \" \"username\" and \"text\" \n- get articleName form url params\n- Next Just add the new comment in the req.body to      comments [] in the selected article.\n*/\napp.post(\"/api/articles/:name/add-comment\", (req, res) => {\n  const { username, text } = req.body;\n\n  // get articleName form url params\n  const articleName = req.params.name;\n\n  /*\n  accesses array ->Name->comments then adds the username and text via .push\n  saving the previous push\n  */\n  articlesInfo[articleName].comments.push({ username, text });\n\n  // respsonse (200)\n  res.status(200).send(articlesInfo[articleName]);\n\n  // res.status(200).send(articlesInfo[articleName]);\n});\n\n/* --- Misc Gets and Post ------*/\n// app.get(\"/hello\", (req, res) => res.send(\"Hello \"));\n\n/* server side: server takes value out pf specified section of url and put it into       response using url params */\n\n// app.get(\"/hello/:name\", (req, res) => res.send(`Hello ${req.params.name}`));\n\n//client side\n// app.post(\"/hello\", (req, res) => res.send(`Hello ${req.body.name}!`));\n\n//listen on port...\napp.listen(8000, () => console.log(\"Listening on port 8000\"));\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1573768894527
  },
  "{\"sourceRoot\":\"/Users/em/Desktop/Wyncode/ReactFullStack/my-app-backend/src\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/em/Desktop/Wyncode/ReactFullStack/my-app-backend\",\"filename\":\"/Users/em/Desktop/Wyncode/ReactFullStack/my-app-backend/src/server.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/em/Desktop/Wyncode/ReactFullStack/my-app-backend\",\"plugins\":[{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.7.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/em/Desktop/Wyncode/ReactFullStack/my-app-backend/src",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/em/Desktop/Wyncode/ReactFullStack/my-app-backend",
      "filename": "/Users/em/Desktop/Wyncode/ReactFullStack/my-app-backend/src/server.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/em/Desktop/Wyncode/ReactFullStack/my-app-backend",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/em/Desktop/Wyncode/ReactFullStack/my-app-backend/src/server.js",
        "plugins": [
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/em/Desktop/Wyncode/ReactFullStack/my-app-backend/src/server.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/em/Desktop/Wyncode/ReactFullStack/my-app-backend/src",
        "sourceFileName": "server.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _express = _interopRequireDefault(require(\"express\"));\n\nvar _bodyParser = _interopRequireDefault(require(\"body-parser\"));\n\nvar _mongodb = require(\"mongodb\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n// Request Types: Get,Post(+requestbody),Patch,Delete\n// run: npx babel-node src/server.js\n// Added body parser dependencies\nvar app = (0, _express[\"default\"])(); //Parses json object that is included with post request.\n\napp.use(_bodyParser[\"default\"].json()); //------ connects monogodb to express ---------------------------------\n\napp.get(\"/api/articles/:name\", function _callee(req, res) {\n  var articleName, client, db, articleInfo;\n  return regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          articleName = req.params.name;\n          _context.next = 4;\n          return regeneratorRuntime.awrap(_mongodb.MongoClient.connect(\"mongodb://localhost:27017\", {\n            useNewUrlParser: true\n          }));\n\n        case 4:\n          client = _context.sent;\n          db = client.db(\"my-app\");\n          _context.next = 8;\n          return regeneratorRuntime.awrap(db.collection(\"articles\").findOne({\n            name: articleName\n          }));\n\n        case 8:\n          articleInfo = _context.sent;\n          res.status(200).json(articleInfo);\n          client.close();\n          _context.next = 16;\n          break;\n\n        case 13:\n          _context.prev = 13;\n          _context.t0 = _context[\"catch\"](0);\n          res.status(500).json({\n            message: \"Error Connection to DB\",\n            error: _context.t0\n          });\n\n        case 16:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 13]]);\n}); //---------------- Upvoting --------------------------------------\n//define a new end point to send request to update upvotes via post request\n\napp.post(\"/api/articles/:name/upvote\", function _callee2(req, res) {\n  var articleName, client, db, articleInfo, updatedArticleInfo;\n  return regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          //get name form params\n          articleName = req.params.name;\n          _context2.next = 4;\n          return regeneratorRuntime.awrap(_mongodb.MongoClient.connect(\"mongodb://localhost:27017\", {\n            useNewUrlParser: true\n          }));\n\n        case 4:\n          client = _context2.sent;\n          db = client.db(\"my-app\");\n          _context2.next = 8;\n          return regeneratorRuntime.awrap(db.collection(\"articles\").findOne({\n            name: articleName\n          }));\n\n        case 8:\n          articleInfo = _context2.sent;\n          _context2.next = 11;\n          return regeneratorRuntime.awrap(db.collection(\"articles\").updateOne({\n            name: articleName\n          }, {\n            $set: {\n              upvotes: articleInfo.upvotes + 1\n            }\n          }));\n\n        case 11:\n          _context2.next = 13;\n          return regeneratorRuntime.awrap(db.collection(\"articles\").findOne({\n            name: articleName\n          }));\n\n        case 13:\n          updatedArticleInfo = _context2.sent;\n          res.status(200).json(updatedArticleInfo);\n          client.close();\n          _context2.next = 21;\n          break;\n\n        case 18:\n          _context2.prev = 18;\n          _context2.t0 = _context2[\"catch\"](0);\n          res.status(500).json({\n            message: \"Error connecting to db\",\n            error: _context2.t0\n          });\n\n        case 21:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 18]]);\n});\n/*\n-------- COMMENT FUNCTION -------------------------------------------------\ncurly braces is the body of our call back (req,res).\ntest in postman to detemrien what the body will look like.\n-Send request to add comment end-point.\n- In PostMan apply url + path in Post.\n- selected options in PostMan: Post, Body, Raw, JSON\n- Fill Body content json format\n- access data via via app.post...\n- Data needed is in req.body\n- \"   \"   \"   \" \"username\" and \"text\" \n- get articleName form url params\n- Next Just add the new comment in the req.body to      comments [] in the selected article.\n*/\n\napp.post(\"/api/articles/:name/add-comment\", function (req, res) {\n  var _req$body = req.body,\n      username = _req$body.username,\n      text = _req$body.text; // get articleName form url params\n\n  var articleName = req.params.name;\n  /*\n  accesses array ->Name->comments then adds the username and text via .push\n  saving the previous push\n  */\n\n  articlesInfo[articleName].comments.push({\n    username: username,\n    text: text\n  }); // respsonse (200)\n\n  res.status(200).send(articlesInfo[articleName]);\n}); //=-----------------------------------------------------------\n\napp.listen(8000, function () {\n  return console.log(\"Listening on port 8000\");\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "server.js"
      ],
      "names": [
        "app",
        "use",
        "bodyParser",
        "json",
        "get",
        "req",
        "res",
        "articleName",
        "params",
        "name",
        "MongoClient",
        "connect",
        "useNewUrlParser",
        "client",
        "db",
        "collection",
        "findOne",
        "articleInfo",
        "status",
        "close",
        "message",
        "error",
        "post",
        "updateOne",
        "$set",
        "upvotes",
        "updatedArticleInfo",
        "body",
        "username",
        "text",
        "articlesInfo",
        "comments",
        "push",
        "send",
        "listen",
        "console",
        "log"
      ],
      "mappings": ";;AAAA;;AACA;;AACA;;;;AAEA;AACA;AACA;AAEA,IAAMA,GAAG,GAAG,0BAAZ,C,CAEA;;AACAA,GAAG,CAACC,GAAJ,CAAQC,uBAAWC,IAAX,EAAR,E,CAEA;;AAEAH,GAAG,CAACI,GAAJ,CAAQ,qBAAR,EAA+B,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAErBC,UAAAA,WAFqB,GAEPF,GAAG,CAACG,MAAJ,CAAWC,IAFJ;AAAA;AAAA,0CAINC,qBAAYC,OAAZ,CAAoB,2BAApB,EAAiD;AACpEC,YAAAA,eAAe,EAAE;AADmD,WAAjD,CAJM;;AAAA;AAIrBC,UAAAA,MAJqB;AAQrBC,UAAAA,EARqB,GAQhBD,MAAM,CAACC,EAAP,CAAU,QAAV,CARgB;AAAA;AAAA,0CAUDA,EAAE,CACzBC,UADuB,CACZ,UADY,EAEvBC,OAFuB,CAEf;AAAEP,YAAAA,IAAI,EAAEF;AAAR,WAFe,CAVC;;AAAA;AAUrBU,UAAAA,WAVqB;AAa3BX,UAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBf,IAAhB,CAAqBc,WAArB;AAEAJ,UAAAA,MAAM,CAACM,KAAP;AAf2B;AAAA;;AAAA;AAAA;AAAA;AAiB3Bb,UAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBf,IAAhB,CAAqB;AAAEiB,YAAAA,OAAO,EAAE,wBAAX;AAAqCC,YAAAA,KAAK;AAA1C,WAArB;;AAjB2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA/B,E,CAqBA;AAEA;;AAEArB,GAAG,CAACsB,IAAJ,CAAS,4BAAT,EAAuC,kBAAOjB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEnC;AACMC,UAAAA,WAH6B,GAGfF,GAAG,CAACG,MAAJ,CAAWC,IAHI;AAAA;AAAA,0CAIdC,qBAAYC,OAAZ,CAAoB,2BAApB,EAAiD;AACpEC,YAAAA,eAAe,EAAE;AADmD,WAAjD,CAJc;;AAAA;AAI7BC,UAAAA,MAJ6B;AAQ7BC,UAAAA,EAR6B,GAQxBD,MAAM,CAACC,EAAP,CAAU,QAAV,CARwB;AAAA;AAAA,0CASTA,EAAE,CACzBC,UADuB,CACZ,UADY,EAEvBC,OAFuB,CAEf;AAAEP,YAAAA,IAAI,EAAEF;AAAR,WAFe,CATS;;AAAA;AAS7BU,UAAAA,WAT6B;AAAA;AAAA,0CAc7BH,EAAE,CAACC,UAAH,CAAc,UAAd,EAA0BQ,SAA1B,CACJ;AAAEd,YAAAA,IAAI,EAAEF;AAAR,WADI,EAEJ;AACEiB,YAAAA,IAAI,EAAE;AACJC,cAAAA,OAAO,EAAER,WAAW,CAACQ,OAAZ,GAAsB;AAD3B;AADR,WAFI,CAd6B;;AAAA;AAAA;AAAA,0CAuBFX,EAAE,CAChCC,UAD8B,CACnB,UADmB,EAE9BC,OAF8B,CAEtB;AAAEP,YAAAA,IAAI,EAAEF;AAAR,WAFsB,CAvBE;;AAAA;AAuB7BmB,UAAAA,kBAvB6B;AA2BnCpB,UAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBf,IAAhB,CAAqBuB,kBAArB;AAEAb,UAAAA,MAAM,CAACM,KAAP;AA7BmC;AAAA;;AAAA;AAAA;AAAA;AA+BnCb,UAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBf,IAAhB,CAAqB;AAAEiB,YAAAA,OAAO,EAAE,wBAAX;AAAqCC,YAAAA,KAAK;AAA1C,WAArB;;AA/BmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAvC;AAmCA;;;;;;;;;;;;;;;AAeArB,GAAG,CAACsB,IAAJ,CAAS,iCAAT,EAA4C,UAACjB,GAAD,EAAMC,GAAN,EAAc;AAAA,kBAC7BD,GAAG,CAACsB,IADyB;AAAA,MAChDC,QADgD,aAChDA,QADgD;AAAA,MACtCC,IADsC,aACtCA,IADsC,EACnB;;AACrC,MAAMtB,WAAW,GAAGF,GAAG,CAACG,MAAJ,CAAWC,IAA/B;AAEA;;;;;AAIAqB,EAAAA,YAAY,CAACvB,WAAD,CAAZ,CAA0BwB,QAA1B,CAAmCC,IAAnC,CAAwC;AAAEJ,IAAAA,QAAQ,EAARA,QAAF;AAAYC,IAAAA,IAAI,EAAJA;AAAZ,GAAxC,EARwD,CAUxD;;AACAvB,EAAAA,GAAG,CAACY,MAAJ,CAAW,GAAX,EAAgBe,IAAhB,CAAqBH,YAAY,CAACvB,WAAD,CAAjC;AACD,CAZD,E,CAcA;;AAEAP,GAAG,CAACkC,MAAJ,CAAW,IAAX,EAAiB;AAAA,SAAMC,OAAO,CAACC,GAAR,CAAY,wBAAZ,CAAN;AAAA,CAAjB",
      "sourceRoot": "/Users/em/Desktop/Wyncode/ReactFullStack/my-app-backend/src",
      "sourcesContent": [
        "import express from \"express\";\nimport bodyParser from \"body-parser\";\nimport { MongoClient } from \"mongodb\";\n\n// Request Types: Get,Post(+requestbody),Patch,Delete\n// run: npx babel-node src/server.js\n// Added body parser dependencies\n\nconst app = express();\n\n//Parses json object that is included with post request.\napp.use(bodyParser.json());\n\n//------ connects monogodb to express ---------------------------------\n\napp.get(\"/api/articles/:name\", async (req, res) => {\n  try {\n    const articleName = req.params.name;\n\n    const client = await MongoClient.connect(\"mongodb://localhost:27017\", {\n      useNewUrlParser: true\n    });\n\n    const db = client.db(\"my-app\");\n\n    const articleInfo = await db\n      .collection(\"articles\")\n      .findOne({ name: articleName });\n    res.status(200).json(articleInfo);\n\n    client.close();\n  } catch (error) {\n    res.status(500).json({ message: \"Error Connection to DB\", error });\n  }\n});\n\n//---------------- Upvoting --------------------------------------\n\n//define a new end point to send request to update upvotes via post request\n\napp.post(\"/api/articles/:name/upvote\", async (req, res) => {\n  try {\n    //get name form params\n    const articleName = req.params.name;\n    const client = await MongoClient.connect(\"mongodb://localhost:27017\", {\n      useNewUrlParser: true\n    });\n\n    const db = client.db(\"my-app\");\n    const articleInfo = await db\n      .collection(\"articles\")\n      .findOne({ name: articleName });\n\n    //here is the query\n    await db.collection(\"articles\").updateOne(\n      { name: articleName },\n      {\n        $set: {\n          upvotes: articleInfo.upvotes + 1\n        }\n      }\n    );\n\n    const updatedArticleInfo = await db\n      .collection(\"articles\")\n      .findOne({ name: articleName });\n\n    res.status(200).json(updatedArticleInfo);\n\n    client.close();\n  } catch (error) {\n    res.status(500).json({ message: \"Error connecting to db\", error });\n  }\n});\n\n/*\n-------- COMMENT FUNCTION -------------------------------------------------\ncurly braces is the body of our call back (req,res).\ntest in postman to detemrien what the body will look like.\n-Send request to add comment end-point.\n- In PostMan apply url + path in Post.\n- selected options in PostMan: Post, Body, Raw, JSON\n- Fill Body content json format\n- access data via via app.post...\n- Data needed is in req.body\n- \"   \"   \"   \" \"username\" and \"text\" \n- get articleName form url params\n- Next Just add the new comment in the req.body to      comments [] in the selected article.\n*/\n\napp.post(\"/api/articles/:name/add-comment\", (req, res) => {\n  const { username, text } = req.body; // get articleName form url params\n  const articleName = req.params.name;\n\n  /*\n  accesses array ->Name->comments then adds the username and text via .push\n  saving the previous push\n  */\n  articlesInfo[articleName].comments.push({ username, text });\n\n  // respsonse (200)\n  res.status(200).send(articlesInfo[articleName]);\n});\n\n//=-----------------------------------------------------------\n\napp.listen(8000, () => console.log(\"Listening on port 8000\"));\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1573832962671
  }
}